{"version":3,"sources":["i18n/config.ts","components/NavBar/styles.js","API/index.ts","components/NavBar/NavBar.tsx","components/Dashboard/styles.js","components/Dashboard/store/reducer.ts","components/Dashboard/Dashboard.tsx","components/Dashboard/store/actions.ts","components/Dashboard/store/sagas.ts","components/Dashboard/store/selectors.ts","components/MovieDetails/store/reducer.ts","components/MovieCard/styles.js","components/MovieCard/MovieCard.tsx","components/Dashboard/MoviesList/MoviesList.tsx","components/MovieDetails/MovieInfo/styles.js","components/MovieDetails/MovieInfo/utils.ts","components/MovieDetails/MovieInfo/MovieInfo.tsx","components/MovieDetails/store/actions.ts","components/MovieDetails/store/sagas.ts","components/MovieDetails/store/selectors.ts","components/Movies/store/reducer.ts","components/MovieDetails/RecomendationsList/styles.js","components/MovieDetails/RecomendationsList/RecomendationsList.tsx","components/MovieDetails/styles.js","components/MovieDetails/MovieDetails.tsx","components/Movies/Filters/styles.js","components/Movies/store/actions.ts","components/Movies/store/sagas.ts","components/Movies/store/selectors.ts","components/RandomMovie/store/reducer.ts","components/Movies/Filters/Filters.tsx","components/Movies/FilteredMoviesList/styles.js","components/Movies/FilteredMoviesList/FilteredMoviesList.tsx","components/Movies/Pagination/styles.js","components/Movies/Pagination/MoviesPagination.tsx","components/Movies/Movies.tsx","components/RandomMovie/store/actions.ts","components/RandomMovie/utils.ts","components/RandomMovie/store/sagas.ts","components/RandomMovie/store/selectors.ts","components/RandomMovie/RandomMovie.tsx","styles.js","App.tsx","store/initialState.ts","store/rootReducer.ts","store/rootSaga.ts","store/index.ts","index.tsx"],"names":["Language","StyledAppBar","styled","AppBar","width","margin","background","StyledTab","Tab","fontSize","fontWeight","color","StyledButton","Button","StyledContainer","Container","display","justifyContent","resources","En","translation","translationEn","Ru","translationRu","i18n","use","initReactI18next","init","lng","ListNames","navTabs","NavBar","t","useTranslation","history","useHistory","location","useLocation","useState","value","setValue","useEffect","window","scrollTo","position","Tabs","aria-label","centered","variant","onChange","e","newValue","TabIndicatorProps","style","map","tab","label","onClick","push","String","Math","random","ButtonGroup","Object","values","changeLanguage","flexWrap","StyledList","List","flexDirection","alignItems","BASE_URL","Status","getMoviesUrl","language","genre","startDate","endDate","page","process","getPosterUrl","path","dashBoardButtons","name","redirectPath","NOW_PLAYING_REQUEST_PATH","UPCOMING_REQUEST_PATH","POPULAR_REQUEST_PATH","Dashboard","GET_MOVIES_SUCCESS","GET_MOVIES_ERROR","GET_MOVIES_REQUESTED","SET_INITIAL_MOVIES_STATE","NOW_PLAYING","UPCOMING","POPULAR","moviesList","movies","status","error","initialListsState","nowPlaying","upcoming","popular","getMoviesSaga","watchMoviesSaga","actionsByNames","success","type","payload","fetch","data","json","result","put","results","slice","takeEvery","StyledCard","Card","maxHeight","backgroundColor","MovieCard","title","id","poster_path","posterSrc","CardActionArea","CardMedia","component","alt","image","CardContent","listsStoreData","selector","lists","action","url","MoviesList","dispatch","useDispatch","list","useParams","useSelector","getListUrl","length","StyledBox","Box","textAlign","marginLeft","arrayToString","arr","item","join","numberToMoney","number","Number","toLocaleString","MovieInfo","budget","genres","production_countries","release_date","revenue","tagline","genresLine","countriesLine","renderData","className","GET_MOVIE_DETAILS_SUCCESS","GET_MOVIE_DETAILS_ERROR","GET_MOVIE_DETAILS_REQUESTED","GET_RECOMENDATIONS_REQUESTED","GET_RECOMENDATIONS_SUCCESS","GET_RECOMENDATIONS_ERROR","getMovieDetailsSuccess","details","getRecomendationsSuccess","recomendations","initialMovieDetailsState","getMovieDetailsSaga","watchMovieDetailsSaga","getRecomendationsSaga","watchRecomendationsSaga","movieDetails","RecomendationsList","height","marginTop","MovieDetails","overview","detailsPath","getMovieDetailsUrl","recomendationsPath","getRecomendationsUrl","getRecomendationsRequested","src","StyledSelect","Select","GET_GENRES_SUCCESS","GET_GENRES_ERROR","GET_GENRES_REQUESTED","GET_FILTERED_MOVIES_SUCCESS","GET_FILTERED_MOVIES_ERROR","GET_FILTERED_MOVIES_REQUESTED","GET_TOTAL_PAGES","initialMoviesState","genresList","filteredMovies","totalPages","getGenresSaga","watchGenresSaga","getFilteredMoviesSaga","watchFilteredMoviesSaga","total_pages","Filters","onAplied","getGenresUrl","setGenre","setStartDate","setEndDate","FormControl","InputLabel","labelId","target","handleGenreChange","MenuItem","TextField","InputLabelProps","shrink","FilteredMoviesList","StyledPagination","Pagination","border","MoviesPagination","changePage","pages","count","size","shape","Movies","setPage","GET_RANDOM_MOVIE_SUCCESS","GET_RANDOM_MOVIE_ERROR","GET_RANDOM_MOVIE_REQUESTED","getRandomMovieSuccess","movie","initialRandomMovieState","randomMovie","getRandomNumber","min","max","ceil","floor","getRandomMovieSaga","watchRandomMovieSaga","array","totalPagesForRandom","RandomMovie","getRandomPage","minWidth","minHeight","fontFamily","App","maxWidth","exact","initialState","combineReducers","state","Requested","Success","Error","rootSaga","all","sagaMiddleware","createSagaMiddleware","composedEnhacers","compose","applyMiddleware","createStore","rootReducer","run","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.4f9c6045.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport translationEn from './en/translationEn.json';\nimport translationRu from './ru/translationRu.json';\nimport { initReactI18next } from 'react-i18next';\n\nexport enum Language {\n  En = 'en',\n  Ru = 'ru',\n}\n\nexport const resources = {\n  [Language.En]: {\n    translation: translationEn,\n  },\n  [Language.Ru]: {\n    translation: translationRu,\n  },\n} as const;\n\ni18n.use(initReactI18next).init({\n  lng: Language.En,\n  resources,\n});\n","import { styled } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tab from '@material-ui/core/Tab';\nimport { Container } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\n\nexport const StyledAppBar = styled(AppBar)({\n  width: '80%',\n  margin: 'auto',\n  background: 'rgb(45, 140, 181)',\n});\n\nexport const StyledTab = styled(Tab)({\n  fontSize: '20px',\n  fontWeight: 'bold',\n  color: 'black',\n});\n\nexport const StyledButton = styled(Button)({\n  width: '40px',\n  fontSize: '16px',\n  fontWeight: 'bold',\n  color: 'black',\n  background: 'rgb(45, 140, 181)',\n});\n\nexport const StyledContainer = styled(Container)({\n  display: 'flex',\n  justifyContent: 'space-between',\n});\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\n//lists\nexport const getListUrl = (language: string, list: ListNames): string =>\n  `${BASE_URL}movie/${list}?api_key=${process.env.REACT_APP_API_KEY}&language=${language}&page=1`;\n\nexport enum ListNames {\n  NOW_PLAYING_REQUEST_PATH = 'now_playing',\n  UPCOMING_REQUEST_PATH = 'upcoming',\n  POPULAR_REQUEST_PATH = 'popular',\n}\n\n//genres\nexport const getGenresUrl = (language: string): string =>\n  `${BASE_URL}genre/movie/list?api_key=${process.env.REACT_APP_API_KEY}&language=${language}`;\n\n//movies\nexport const getMoviesUrl = (\n  language: string,\n  genre: string,\n  startDate: string,\n  endDate: string,\n  page: number\n): string =>\n  `${BASE_URL}discover/movie?api_key=${process.env.REACT_APP_API_KEY}&language=${language}&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres=${genre}&primary_release_date.gte=${startDate}&primary_release_date.lte=${endDate}&page=${page}&with_watch_monetization_types=flatrate`;\n\n//details\nexport const getMovieDetailsUrl = (language: string, id: number): string =>\n  `${BASE_URL}movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=${language}`;\n\n//poster\nexport const getPosterUrl = (path: string): string => `https://image.tmdb.org/t/p/w500/${path}`;\n\n//recomendations\nexport const getRecomendationsUrl = (language: string, id: number): string =>\n  `${BASE_URL}/movie/${id}/recommendations?api_key=${process.env.REACT_APP_API_KEY}&language=${language}&page=1`;\n","import React, { useState, useEffect } from 'react';\nimport { StyledAppBar, StyledTab, StyledButton, StyledContainer } from './styles';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport i18n from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { Language } from '../../i18n/config';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst navTabs: string[] = ['navBar.dashboard', 'navBar.movies', 'navBar.randomMovie'];\n\nexport const NavBar: React.FC = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const location = useLocation();\n  const [value, setValue] = useState(0);\n\n  const handleChange = (e: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  return (\n    <StyledContainer>\n      <StyledAppBar position=\"static\">\n        <Tabs\n          aria-label=\"simple tabs example\"\n          centered\n          variant=\"fullWidth\"\n          value={value}\n          onChange={handleChange}\n          TabIndicatorProps={{\n            style: { background: 'black' },\n          }}\n        >\n          {navTabs.map((tab) => (\n            <StyledTab\n              label={t(tab)}\n              key={String(Math.random())}\n              onClick={() => history.push(`/${t(tab, { lng: 'en' })}/`)}\n            />\n          ))}\n        </Tabs>\n      </StyledAppBar>\n      <ButtonGroup variant=\"contained\" aria-label=\"contained primary button group\">\n        {Object.values(Language).map((lng) => (\n          <StyledButton key={String(Math.random())} onClick={() => i18n.changeLanguage(lng)}>\n            {lng}\n          </StyledButton>\n        ))}\n      </ButtonGroup>\n    </StyledContainer>\n  );\n};\n","import Button from '@material-ui/core/Button';\nimport { Container } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nexport const StyledButton = styled(Button)({\n  width: '140px',\n  fontSize: '14px',\n  color: 'black',\n  background: 'rgb(45, 140, 181)',\n  margin: '8px',\n  '&:hover': {\n    background: 'white',\n  },\n});\n\nexport const StyledContainer = styled(Container)({\n  width: '40%',\n  display: 'flex',\n  flexWrap: 'nowrap',\n});\n\nexport const StyledList = styled(List)({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n  flexWrap: 'wrap',\n  alignItems: 'center',\n});\n","import { GET_MOVIES_SUCCESS, GET_MOVIES_REQUESTED, GET_MOVIES_ERROR, SET_INITIAL_MOVIES_STATE } from './actions';\n\nconst moviesList = {\n  movies: [],\n  status: null,\n  error: null,\n};\n\nexport const initialListsState = {\n  nowPlaying: moviesList,\n  upcoming: moviesList,\n  popular: moviesList,\n};\n\nenum Status {\n  Requested = 'requested',\n  Success = 'success',\n  Error = 'error',\n}\n\nexport const lists = (state = initialListsState, action: any) => {\n  switch (action.type) {\n    case GET_MOVIES_REQUESTED:\n      return {\n        ...state,\n        [action.name]: {\n          movies: [],\n          status: Status.Requested,\n          error: null,\n        },\n      };\n\n    case GET_MOVIES_SUCCESS:\n      return {\n        ...state,\n        [action.name]: {\n          movies: action.payload,\n          status: Status.Success,\n          error: null,\n        },\n      };\n\n    case GET_MOVIES_ERROR:\n      return {\n        ...state,\n        [action.name]: {\n          movies: [],\n          status: Status.Error,\n          error: action.payload,\n        },\n      };\n\n    case SET_INITIAL_MOVIES_STATE:\n      return {\n        ...initialListsState,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","import React from 'react';\nimport { StyledButton, StyledContainer } from './styles';\nimport { useTranslation } from 'react-i18next';\nimport { ListNames } from '../../API';\nimport { useHistory } from 'react-router';\n\nconst dashBoardButtons: { name: string; redirectPath: string }[] = [\n  { name: 'dashboard.nowPlaying', redirectPath: ListNames.NOW_PLAYING_REQUEST_PATH },\n  { name: 'dashboard.upcoming', redirectPath: ListNames.UPCOMING_REQUEST_PATH },\n  { name: 'dashboard.popular', redirectPath: ListNames.POPULAR_REQUEST_PATH },\n];\n\nexport const Dashboard: React.FC = () => {\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <StyledContainer>\n        {dashBoardButtons.map(({ name, redirectPath }) => (\n          <StyledButton key={name} onClick={() => history.push(redirectPath)}>\n            {t(name)}\n          </StyledButton>\n        ))}\n      </StyledContainer>\n    </>\n  );\n};\n","export const GET_MOVIES_SUCCESS = 'GET_MOVIES_SUCCESS';\nexport const GET_MOVIES_ERROR = 'GET_MOVIES_ERROR';\nexport const GET_MOVIES_REQUESTED = 'GET_MOVIES_REQUESTED';\nexport const SET_INITIAL_MOVIES_STATE = 'SET_INITIAL_MOVIES_STATE';\n\nexport const NOW_PLAYING = 'nowPlaying';\nexport const UPCOMING = 'upcoming';\nexport const POPULAR = 'popular';\n\nexport const getNowPlayingSuccess = (movies: []) => {\n  return {\n    type: GET_MOVIES_SUCCESS,\n    name: NOW_PLAYING,\n    payload: movies,\n  };\n};\n\nexport const getNowPlayingError = (error: Error) => {\n  return {\n    type: GET_MOVIES_ERROR,\n    name: NOW_PLAYING,\n    payload: error,\n  };\n};\n\nexport const getNowPlayingRequested = (url: string) => {\n  return {\n    type: GET_MOVIES_REQUESTED,\n    name: NOW_PLAYING,\n    payload: url,\n  };\n};\n\nexport const getUpcomingSuccess = (movies: []) => {\n  return {\n    type: GET_MOVIES_SUCCESS,\n    name: UPCOMING,\n    payload: movies,\n  };\n};\n\nexport const getUpcomingError = (error: Error) => {\n  return {\n    type: GET_MOVIES_ERROR,\n    name: UPCOMING,\n    payload: error,\n  };\n};\n\nexport const getUpcomingRequested = (url: string) => {\n  return {\n    type: GET_MOVIES_REQUESTED,\n    name: UPCOMING,\n    payload: url,\n  };\n};\n\nexport const getPopularSuccess = (movies: []) => {\n  return {\n    type: GET_MOVIES_SUCCESS,\n    name: POPULAR,\n    payload: movies,\n  };\n};\n\nexport const getPopularError = (error: Error) => {\n  return {\n    type: GET_MOVIES_ERROR,\n    name: POPULAR,\n    payload: error,\n  };\n};\n\nexport const getPopularRequested = (url: string) => {\n  return {\n    type: GET_MOVIES_REQUESTED,\n    name: POPULAR,\n    payload: url,\n  };\n};\n\nexport const setInitialMoviesState = () => {\n  return {\n    type: SET_INITIAL_MOVIES_STATE,\n  };\n};\n","import { put, takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\n\nimport {\n  getNowPlayingSuccess,\n  getNowPlayingError,\n  getPopularSuccess,\n  getPopularError,\n  getUpcomingSuccess,\n  getUpcomingError,\n  GET_MOVIES_REQUESTED,\n  NOW_PLAYING,\n  POPULAR,\n  UPCOMING,\n} from './actions';\n\nconst actionsByNames = {\n  [NOW_PLAYING]: {\n    success: getNowPlayingSuccess,\n    error: getNowPlayingError,\n  },\n  [POPULAR]: {\n    success: getPopularSuccess,\n    error: getPopularError,\n  },\n  [UPCOMING]: {\n    success: getUpcomingSuccess,\n    error: getUpcomingError,\n  },\n};\n\nconst maxListLength = 5;\n\nexport function* getMoviesSaga({ payload, name }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    yield put(actionsByNames[name as keyof typeof actionsByNames].success(result.results.slice(0, maxListLength)));\n  } catch (error) {\n    put(actionsByNames[name as keyof typeof actionsByNames].error(error));\n  }\n}\n\nexport function* watchMoviesSaga() {\n  yield takeEvery(GET_MOVIES_REQUESTED, getMoviesSaga);\n}\n","export const nowPlaying = ({ lists }: any) => lists.nowPlaying.movies;\nexport const upcoming = ({ lists }: any) => lists.upcoming.movies;\nexport const popular = ({ lists }: any) => lists.popular.movies;\n","import {\n  GET_MOVIE_DETAILS_SUCCESS,\n  GET_MOVIE_DETAILS_REQUESTED,\n  GET_MOVIE_DETAILS_ERROR,\n  GET_RECOMENDATIONS_REQUESTED,\n  GET_RECOMENDATIONS_SUCCESS,\n  GET_RECOMENDATIONS_ERROR,\n} from './actions';\n\nexport const initialMovieDetailsState = {\n  details: {},\n  status: null,\n  error: null,\n  recomendations: {\n    movies: [],\n    status: null,\n    error: null,\n  },\n};\n\nenum Status {\n  Requested = 'requested',\n  Success = 'success',\n  Error = 'error',\n}\n\nexport const movieDetails = (state = initialMovieDetailsState, action: any) => {\n  switch (action.type) {\n    case GET_MOVIE_DETAILS_REQUESTED:\n      return {\n        ...state,\n        status: Status.Requested,\n      };\n\n    case GET_MOVIE_DETAILS_SUCCESS:\n      return {\n        ...state,\n        details: action.payload,\n        status: Status.Success,\n      };\n\n    case GET_MOVIE_DETAILS_ERROR:\n      return {\n        ...state,\n        status: Status.Error,\n        error: action.payload,\n      };\n\n    case GET_RECOMENDATIONS_REQUESTED:\n      return {\n        ...state,\n        recomendations: {\n          movies: [],\n          status: Status.Requested,\n          error: null,\n        },\n      };\n\n    case GET_RECOMENDATIONS_SUCCESS:\n      return {\n        ...state,\n        recomendations: {\n          movies: action.payload,\n          status: Status.Success,\n          error: null,\n        },\n      };\n\n    case GET_RECOMENDATIONS_ERROR:\n      return {\n        ...state,\n        recomendations: {\n          movies: [],\n          status: Status.Error,\n          error: action.payload,\n        },\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","import Card from '@material-ui/core/Card';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledCard = styled(Card)({\n  width: '200px',\n  maxHeight: '380px',\n  margin: ' 20px 40px',\n  '& :hover': {\n    backgroundColor: 'rgb(107, 100, 100);',\n    color: 'white',\n  },\n  '& img': {\n    maxHeight: '300px',\n  },\n});\n","import React from 'react';\nimport { ListItemData } from '../Dashboard';\nimport { CardContent, CardMedia, CardActionArea } from '@material-ui/core';\nimport { getPosterUrl } from '../../API';\nimport { useHistory } from 'react-router-dom';\nimport { StyledCard } from './styles';\n\nexport const MovieCard: React.FC<ListItemData> = ({ title, id, poster_path }) => {\n  const posterSrc = getPosterUrl(poster_path);\n  const history = useHistory();\n\n  return (\n    <StyledCard onClick={() => history.push(`/movie-details/${id}`)}>\n      <CardActionArea>\n        <CardMedia component=\"img\" alt=\"Poster\" image={posterSrc} />\n        <CardContent>\n          <h4>{title}</h4>\n        </CardContent>\n      </CardActionArea>\n    </StyledCard>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport {\n  nowPlaying,\n  popular,\n  upcoming,\n  getNowPlayingRequested,\n  getPopularRequested,\n  getUpcomingRequested,\n  setInitialMoviesState,\n} from '../store';\nimport { getListUrl, ListNames } from '../../../API';\nimport i18n from 'i18next';\nimport { ListItemData } from '../';\nimport { MovieCard } from '../../MovieCard';\nimport { StyledList } from '../styles';\n\nconst listsStoreData = {\n  [ListNames.NOW_PLAYING_REQUEST_PATH]: {\n    selector: nowPlaying,\n    action: getNowPlayingRequested,\n  },\n  [ListNames.UPCOMING_REQUEST_PATH]: {\n    selector: upcoming,\n    action: getUpcomingRequested,\n  },\n  [ListNames.POPULAR_REQUEST_PATH]: {\n    selector: popular,\n    action: getPopularRequested,\n  },\n};\n\nexport const MoviesList: React.FC = () => {\n  const dispatch = useDispatch();\n  const { list } = useParams<{ list: keyof typeof listsStoreData }>();\n  const movies = useSelector(listsStoreData[list].selector);\n  const language = i18n.language;\n  const path = getListUrl(language, list);\n\n  useEffect(() => {\n    if (movies.length === 0) {\n      dispatch(listsStoreData[list].action(path));\n    }\n  }, [list, dispatch, movies.length, path]);\n\n  useEffect(() => {\n    dispatch(setInitialMoviesState());\n  }, [language, dispatch]);\n\n  return (\n    <StyledList>\n      {movies.map(({ title, id, poster_path }: ListItemData) => (\n        <MovieCard title={title} id={id} poster_path={poster_path} key={id} />\n      ))}\n    </StyledList>\n  );\n};\n","import { Box } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledBox = styled(Box)({\n  width: '420px',\n  fontSize: '14px',\n  display: 'flex',\n  justifyContent: 'space-between',\n  '& .name': {\n    color: 'grey',\n    width: '120px',\n    textAlign: 'left',\n    marginLeft: '20px',\n  },\n  '& .value': {\n    width: '300px',\n    textAlign: 'left',\n  },\n});\n","export const arrayToString = (arr: any[]) => arr.map((item) => item.name).join(', ');\nexport const numberToMoney = (number: number) => (number ? `${Number(number).toLocaleString()} $` : 0);\n","import React from 'react';\nimport { MovieInfoProps } from '../types';\nimport { StyledBox } from './styles';\nimport { useTranslation } from 'react-i18next';\nimport { arrayToString, numberToMoney } from './utils';\n\nexport const MovieInfo: React.FC<MovieInfoProps> = ({\n  budget,\n  genres,\n  production_countries,\n  release_date,\n  revenue,\n  tagline,\n}) => {\n  const { t } = useTranslation();\n  const genresLine = arrayToString(genres);\n  const countriesLine = arrayToString(production_countries);\n  const renderData = [\n    {\n      name: t('details.releaseDate'),\n      value: release_date,\n    },\n    {\n      name: t('details.tagline'),\n      value: tagline,\n    },\n    {\n      name: t('details.genre'),\n      value: genresLine,\n    },\n    {\n      name: t('details.country'),\n      value: countriesLine,\n    },\n    {\n      name: t('details.budget'),\n      value: numberToMoney(budget),\n    },\n    {\n      name: t('details.revenue'),\n      value: numberToMoney(revenue),\n    },\n  ];\n\n  return (\n    <div>\n      {renderData.map(({ name, value }) =>\n        value ? (\n          <StyledBox key={name}>\n            <p className=\"name\">{name}</p>\n            <p className=\"value\">{value}</p>\n          </StyledBox>\n        ) : null\n      )}\n    </div>\n  );\n};\n","export const GET_MOVIE_DETAILS_SUCCESS = 'GET_MOVIE_DETAILS_SUCCESS';\nexport const GET_MOVIE_DETAILS_ERROR = 'GET_MOVIE_DETAILS_ERROR';\nexport const GET_MOVIE_DETAILS_REQUESTED = 'GET_MOVIE_DETAILS_REQUESTED';\nexport const GET_RECOMENDATIONS_REQUESTED = 'GET_RECOMENDATIONS_REQUESTED';\nexport const GET_RECOMENDATIONS_SUCCESS = 'GET_RECOMENDATIONS_SUCCESS';\nexport const GET_RECOMENDATIONS_ERROR = 'GET_RECOMENDATIONS_ERROR';\n\nexport const getMovieDetailsSuccess = (details: {}) => {\n  return {\n    type: GET_MOVIE_DETAILS_SUCCESS,\n    payload: details,\n  };\n};\n\nexport const getMovieDetailsError = (error: Error) => {\n  return {\n    type: GET_MOVIE_DETAILS_ERROR,\n    payload: error,\n  };\n};\n\nexport const getMovieDetailsRequested = (url: string) => {\n  return {\n    type: GET_MOVIE_DETAILS_REQUESTED,\n    payload: url,\n  };\n};\n\nexport const getRecomendationsSuccess = (recomendations: []) => {\n  return {\n    type: GET_RECOMENDATIONS_SUCCESS,\n    payload: recomendations,\n  };\n};\n\nexport const getRecomendationsError = (error: Error) => {\n  return {\n    type: GET_RECOMENDATIONS_ERROR,\n    payload: error,\n  };\n};\n\nexport const getRecomendationsRequested = (url: string) => {\n  return {\n    type: GET_RECOMENDATIONS_REQUESTED,\n    payload: url,\n  };\n};\n","import { put, takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\n\nimport {\n  getMovieDetailsError,\n  getMovieDetailsSuccess,\n  GET_MOVIE_DETAILS_REQUESTED,\n  getRecomendationsError,\n  getRecomendationsSuccess,\n  GET_RECOMENDATIONS_REQUESTED,\n} from './actions';\n\nexport function* getMovieDetailsSaga({ payload }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    yield put(getMovieDetailsSuccess(result));\n  } catch (error) {\n    put(getMovieDetailsError(error));\n  }\n}\n\nexport function* watchMovieDetailsSaga() {\n  yield takeEvery(GET_MOVIE_DETAILS_REQUESTED, getMovieDetailsSaga);\n}\n\nconst recomendationsListLength = 6;\n\nexport function* getRecomendationsSaga({ payload }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    yield put(getRecomendationsSuccess(result.results.slice(0, recomendationsListLength)));\n  } catch (error) {\n    put(getRecomendationsError(error));\n  }\n}\n\nexport function* watchRecomendationsSaga() {\n  yield takeEvery(GET_RECOMENDATIONS_REQUESTED, getRecomendationsSaga);\n}\n","export const details = ({ movieDetails }: any) => movieDetails.details;\nexport const recomendations = ({ movieDetails }: any) => movieDetails.recomendations.movies;\n","import {\n  GET_GENRES_ERROR,\n  GET_GENRES_SUCCESS,\n  GET_GENRES_REQUESTED,\n  GET_FILTERED_MOVIES_REQUESTED,\n  GET_FILTERED_MOVIES_ERROR,\n  GET_FILTERED_MOVIES_SUCCESS,\n  GET_TOTAL_PAGES,\n} from './actions';\n\nexport const initialMoviesState = {\n  genres: {\n    genresList: [],\n    status: null,\n    error: null,\n  },\n  filteredMovies: {\n    movies: [],\n    status: null,\n    error: null,\n    totalPages: 0,\n  },\n  totalPages: 0,\n};\n\nenum Status {\n  Requested = 'requested',\n  Success = 'success',\n  Error = 'error',\n}\n\nexport const movies = (state = initialMoviesState, action: any) => {\n  switch (action.type) {\n    case GET_GENRES_REQUESTED:\n      return {\n        ...state,\n        genres: {\n          genresList: [],\n          status: Status.Requested,\n          error: null,\n        },\n      };\n\n    case GET_GENRES_SUCCESS:\n      return {\n        ...state,\n        genres: {\n          genresList: action.payload,\n          status: Status.Success,\n          error: null,\n        },\n      };\n\n    case GET_GENRES_ERROR:\n      return {\n        ...state,\n        genres: {\n          genresList: [],\n          status: Status.Error,\n          error: action.payload,\n        },\n      };\n\n    case GET_FILTERED_MOVIES_REQUESTED:\n      return {\n        ...state,\n        filteredMovies: {\n          movies: [],\n          status: Status.Requested,\n          error: null,\n        },\n      };\n\n    case GET_FILTERED_MOVIES_SUCCESS:\n      return {\n        ...state,\n        filteredMovies: {\n          movies: action.payload,\n          status: Status.Success,\n          error: null,\n        },\n      };\n\n    case GET_FILTERED_MOVIES_ERROR:\n      return {\n        ...state,\n        filteredMovies: {\n          movies: [],\n          status: Status.Error,\n          error: action.payload,\n        },\n      };\n\n    case GET_TOTAL_PAGES:\n      return {\n        ...state,\n        totalPages: action.payload,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","import { styled } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nexport const StyledList = styled(List)({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n  flexWrap: 'wrap',\n  alignItems: 'center',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { recomendations } from '../store';\nimport { ListItemData } from '../../Dashboard';\nimport { MovieCard } from '../../MovieCard';\nimport { StyledList } from './styles';\n\nexport const RecomendationsList: React.FC = () => {\n  const list = useSelector(recomendations);\n  return (\n    <StyledList>\n      {list.map(({ title, id, poster_path }: ListItemData) => (\n        <MovieCard title={title} id={id} poster_path={poster_path} />\n      ))}\n    </StyledList>\n  );\n};\n","import { Container } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledContainer = styled(Container)({\n  width: '70%',\n  '& img': {\n    width: '300px',\n    height: '420px',\n  },\n  '& .overview': {\n    textAlign: 'justify',\n    fontWeight: 'lighter',\n  },\n  '& .recomendations': {\n    marginTop: '60px',\n  },\n});\n","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport i18n from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { details, getMovieDetailsRequested, getRecomendationsRequested } from './store';\nimport { getMovieDetailsUrl, getPosterUrl, getRecomendationsUrl } from '../../API';\nimport { StyledContainer } from './styles';\nimport { Box } from '@material-ui/core';\nimport { MovieInfo, RecomendationsList } from './';\n\nexport const MovieDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const { title, poster_path, budget, genres, overview, production_countries, release_date, revenue, tagline } =\n    useSelector(details);\n\n  const language = i18n.language;\n  const { t } = useTranslation();\n  const { id } = useParams<{ id: string }>();\n  const detailsPath = getMovieDetailsUrl(language, Number(id));\n  const posterSrc = getPosterUrl(poster_path);\n  const recomendationsPath = getRecomendationsUrl(language, Number(id));\n\n  useEffect(() => {\n    dispatch(getMovieDetailsRequested(detailsPath));\n    dispatch(getRecomendationsRequested(recomendationsPath));\n  }, [dispatch, detailsPath, recomendationsPath]);\n\n  return (\n    <StyledContainer>\n      <h2>{title}</h2>\n      <Box display=\"flex\" justifyContent=\"space-around\">\n        <img src={posterSrc} alt=\"Alt text\" />\n        {overview && (\n          <MovieInfo\n            budget={budget}\n            genres={genres}\n            production_countries={production_countries}\n            release_date={release_date}\n            revenue={revenue}\n            tagline={tagline}\n          />\n        )}\n      </Box>\n      <div>\n        <h3>{t('details.overview')}</h3>\n        <p className=\"overview\">{overview}</p>\n      </div>\n      <div className=\"recomendations\">\n        <h3>{t('details.recomendations')}</h3>\n        <RecomendationsList />\n      </div>\n    </StyledContainer>\n  );\n};\n","import { Container, Select } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledSelect = styled(Select)({\n  width: '140px',\n  fontSize: '14px',\n  color: 'black',\n  margin: '8px',\n});\n\nexport const StyledContainer = styled(Container)({\n  width: '75%',\n  display: 'flex',\n  justifyContent: 'space-around',\n  marginTop: '8px',\n});\n","export const GET_GENRES_SUCCESS = 'GET_GENRES_SUCCESS';\nexport const GET_GENRES_ERROR = 'GET_GENRES_ERROR';\nexport const GET_GENRES_REQUESTED = 'GET_GENRES_REQUESTED';\nexport const GET_FILTERED_MOVIES_SUCCESS = 'GET_FILTERED_MOVIES_SUCCESS';\nexport const GET_FILTERED_MOVIES_ERROR = 'GET_FILTERED_MOVIES_ERROR';\nexport const GET_FILTERED_MOVIES_REQUESTED = 'GET_FILTERED_MOVIES_REQUESTED';\nexport const GET_TOTAL_PAGES = 'GET_TOTAL_PAGES';\n\nexport const getGenresSuccess = (genres: []) => {\n  return {\n    type: GET_GENRES_SUCCESS,\n    payload: genres,\n  };\n};\n\nexport const getGenresError = (error: Error) => {\n  return {\n    type: GET_GENRES_ERROR,\n    payload: error,\n  };\n};\n\nexport const getGenresRequested = (url: string) => {\n  return {\n    type: GET_GENRES_REQUESTED,\n    payload: url,\n  };\n};\n\nexport const getFilteredMoviesSuccess = (movies: []) => {\n  return {\n    type: GET_FILTERED_MOVIES_SUCCESS,\n    payload: movies,\n  };\n};\n\nexport const getFilteredMoviesError = (error: Error) => {\n  return {\n    type: GET_FILTERED_MOVIES_ERROR,\n    payload: error,\n  };\n};\n\nexport const getFilteredMoviesRequested = (url: string) => {\n  return {\n    type: GET_FILTERED_MOVIES_REQUESTED,\n    payload: url,\n  };\n};\n\nexport const getTotalPages = (totalPages: Number) => {\n  return {\n    type: GET_TOTAL_PAGES,\n    payload: totalPages,\n  };\n};\n","import { put, takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\nimport {\n  getGenresError,\n  getGenresSuccess,\n  GET_GENRES_REQUESTED,\n  getFilteredMoviesError,\n  getFilteredMoviesSuccess,\n  GET_FILTERED_MOVIES_REQUESTED,\n  getTotalPages,\n} from './actions';\n\nexport function* getGenresSaga({ payload }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    yield put(getGenresSuccess(result.genres));\n  } catch (error) {\n    put(getGenresError(error));\n  }\n}\n\nexport function* watchGenresSaga() {\n  yield takeEvery(GET_GENRES_REQUESTED, getGenresSaga);\n}\n\nexport function* getFilteredMoviesSaga({ payload }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    yield put(getFilteredMoviesSuccess(result.results));\n    yield put(getTotalPages(result.total_pages));\n  } catch (error) {\n    put(getFilteredMoviesError(error));\n  }\n}\n\nexport function* watchFilteredMoviesSaga() {\n  yield takeEvery(GET_FILTERED_MOVIES_REQUESTED, getFilteredMoviesSaga);\n}\n","export const genres = ({ movies }: any) => movies.genres.genresList;\nexport const filteredMovies = ({ movies }: any) => movies.filteredMovies.movies;\nexport const totalPages = ({ movies }: any) => movies.totalPages;\n","import {\n  GET_RANDOM_MOVIE_REQUESTED,\n  GET_RANDOM_MOVIE_ERROR,\n  GET_RANDOM_MOVIE_SUCCESS,\n  GET_TOTAL_PAGES,\n} from './actions';\n\nexport const initialRandomMovieState = {\n  randomMovie: {\n    movie: {},\n    status: null,\n    error: null,\n  },\n  totalPages: 0,\n};\n\nenum Status {\n  Requested = 'requested',\n  Success = 'success',\n  Error = 'error',\n}\n\nexport const random = (state = initialRandomMovieState, action: any) => {\n  switch (action.type) {\n    case GET_RANDOM_MOVIE_REQUESTED:\n      return {\n        ...state,\n        randomMovie: {\n          movie: {},\n          status: Status.Requested,\n          error: null,\n        },\n      };\n\n    case GET_RANDOM_MOVIE_SUCCESS:\n      return {\n        ...state,\n        randomMovie: {\n          movie: action.payload,\n          status: Status.Success,\n          error: null,\n        },\n      };\n\n    case GET_RANDOM_MOVIE_ERROR:\n      return {\n        ...state,\n        randomMovie: {\n          movie: {},\n          status: Status.Error,\n          error: action.payload,\n        },\n      };\n\n    case GET_TOTAL_PAGES:\n      return {\n        ...state,\n        totalPages: action.payload,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { InputLabel, MenuItem, FormControl, TextField } from '@material-ui/core';\nimport { StyledSelect, StyledContainer } from './styles';\nimport { StyledButton } from '../../Dashboard/styles';\nimport { getGenresUrl } from '../../../API';\nimport i18n from 'i18next';\nimport { getGenresRequested, genres } from '../store';\nimport { useTranslation } from 'react-i18next';\nimport { FilterItemData } from '../';\nimport { FiltersProps } from '../types';\n\nconst DEFAULT_FILTERS_VALUE = '';\n\nexport const Filters: React.FC<FiltersProps> = ({ onAplied }) => {\n  const language = i18n.language;\n  const path = getGenresUrl(language);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const genresList = useSelector(genres);\n\n  const [genre, setGenre] = useState(DEFAULT_FILTERS_VALUE);\n  const [startDate, setStartDate] = useState(DEFAULT_FILTERS_VALUE);\n  const [endDate, setEndDate] = useState(DEFAULT_FILTERS_VALUE);\n\n  const handleGenreChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const target = e.target as HTMLSelectElement;\n    setGenre(target.value);\n  };\n\n  const handleStartDateChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setStartDate(e.target.value);\n  };\n\n  const handleEndDateChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setEndDate(e.target.value);\n  };\n\n  useEffect(() => {\n    dispatch(getGenresRequested(path));\n  }, [dispatch, path]);\n\n  return (\n    <StyledContainer>\n      <FormControl>\n        <InputLabel id=\"demo-simple-select-label\">{t('filters.genre')}</InputLabel>\n        <StyledSelect\n          labelId=\"demo-simple-select-label\"\n          value={genre}\n          onChange={(e) => handleGenreChange(e as React.ChangeEvent<HTMLSelectElement>)}\n        >\n          {genresList.map(({ name, id }: FilterItemData) => (\n            <MenuItem key={id} value={id}>\n              {name}\n            </MenuItem>\n          ))}\n        </StyledSelect>\n      </FormControl>\n      <TextField\n        label={t('filters.startDate')}\n        type=\"date\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleStartDateChange}\n        value={startDate}\n      />\n      <TextField\n        label={t('filters.endDate')}\n        type=\"date\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleEndDateChange}\n        value={endDate}\n      />\n      <StyledButton onClick={() => onAplied(genre, startDate, endDate)}>{t('filters.apply')}</StyledButton>\n    </StyledContainer>\n  );\n};\n","import { styled } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\n\nexport const StyledList = styled(List)({\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n  flexWrap: 'wrap',\n  alignItems: 'center',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { filteredMovies } from '../store';\nimport { StyledList } from './styles';\nimport { MovieCard } from '../../MovieCard';\nimport { ListItemData } from '../../Dashboard';\n\nexport const FilteredMoviesList: React.FC = () => {\n  const movies = useSelector(filteredMovies);\n\n  return (\n    <StyledList>\n      {movies.map(({ title, id, poster_path }: ListItemData) => (\n        <MovieCard title={title} id={id} poster_path={poster_path} key={id} />\n      ))}\n    </StyledList>\n  );\n};\n","import Pagination from '@material-ui/lab/Pagination';\nimport { Container } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledPagination = styled(Pagination)({\n  '& button': {\n    background: 'rgb(45, 140, 181)',\n    '&:hover': {\n      background: 'white',\n    },\n  },\n  '& .Mui-selected': {\n    border: '2px solid black',\n    fontWeight: 'bold',\n    background: 'rgb(45, 140, 181)',\n  },\n});\n\nexport const StyledContainer = styled(Container)({\n  display: 'flex',\n  justifyContent: 'space-around',\n  marginTop: '8px',\n});\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { totalPages } from '../store';\nimport { StyledPagination, StyledContainer } from './styles';\n\ninterface Pagination {\n  changePage: (page: number) => void;\n  page: number;\n}\n\nexport const MoviesPagination: React.FC<Pagination> = ({ changePage, page }) => {\n  const pages = useSelector(totalPages);\n  return (\n    <StyledContainer>\n      <StyledPagination\n        count={pages}\n        size=\"large\"\n        shape=\"rounded\"\n        onChange={(e, page) => changePage(page)}\n        page={page}\n      />\n    </StyledContainer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Filters, MoviesPagination, FilteredMoviesList } from './';\nimport { useDispatch } from 'react-redux';\nimport { getMoviesUrl } from '../../API';\nimport i18n from 'i18next';\nimport { getFilteredMoviesRequested } from './store';\n\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_FILTERS_VALUE = '';\n\nexport const Movies: React.FC = () => {\n  const language = i18n.language;\n  const [page, setPage] = useState(DEFAULT_PAGE);\n  const dispatch = useDispatch();\n\n  const [genre, setGenre] = useState(DEFAULT_FILTERS_VALUE);\n  const [startDate, setStartDate] = useState(DEFAULT_FILTERS_VALUE);\n  const [endDate, setEndDate] = useState(DEFAULT_FILTERS_VALUE);\n\n  const path = getMoviesUrl(language, genre, startDate, endDate, page);\n\n  const applyFilterParams = (genre: string, startDate: string, endDate: string) => {\n    setGenre(genre);\n    setStartDate(startDate);\n    setEndDate(endDate);\n    setPage(DEFAULT_PAGE);\n  };\n\n  useEffect(() => {\n    dispatch(getFilteredMoviesRequested(path));\n  }, [dispatch, path]);\n\n  return (\n    <div>\n      <Filters onAplied={applyFilterParams} />\n      <MoviesPagination changePage={(page) => setPage(page)} page={page} />\n      <FilteredMoviesList />\n    </div>\n  );\n};\n","export const GET_RANDOM_MOVIE_SUCCESS = 'GET_RANDOM_MOVIE_SUCCESS';\nexport const GET_RANDOM_MOVIE_ERROR = 'GET_RANDOM_MOVIE_ERROR';\nexport const GET_RANDOM_MOVIE_REQUESTED = 'GET_RANDOM_MOVIE_REQUESTED';\nexport const GET_TOTAL_PAGES = 'GET_TOTAL_PAGES';\n\nexport const getRandomMovieSuccess = (movie: {}) => {\n  return {\n    type: GET_RANDOM_MOVIE_SUCCESS,\n    payload: movie,\n  };\n};\n\nexport const getRandomMovieError = (error: Error) => {\n  return {\n    type: GET_RANDOM_MOVIE_ERROR,\n    payload: error,\n  };\n};\n\nexport const getRandomMovieRequested = (url: string) => {\n  return {\n    type: GET_RANDOM_MOVIE_REQUESTED,\n    payload: url,\n  };\n};\n\nexport const getTotalPages = (totalPages: Number) => {\n  return {\n    type: GET_TOTAL_PAGES,\n    payload: totalPages,\n  };\n};\n","export const getRandomNumber = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getRandomPage = (totalPages: number) => {\n  return getRandomNumber(1, totalPages);\n};\n\nexport const getRandomMovie = (array: []) => {\n  return array.length ? array[getRandomNumber(0, array.length - 1)] : array;\n};\n","import { put, takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\nimport { getRandomMovieError, getRandomMovieSuccess, GET_RANDOM_MOVIE_REQUESTED, getTotalPages } from './actions';\nimport { getRandomMovie } from '../utils';\n\nexport function* getRandomMovieSaga({ payload }: AnyAction): any {\n  try {\n    const data = yield fetch(payload);\n    const result = yield data.json();\n    const movie = yield getRandomMovie(result.results);\n    yield put(getRandomMovieSuccess(movie));\n    yield put(getTotalPages(result.total_pages));\n  } catch (error) {\n    put(getRandomMovieError(error));\n  }\n}\n\nexport function* watchRandomMovieSaga() {\n  yield takeEvery(GET_RANDOM_MOVIE_REQUESTED, getRandomMovieSaga);\n}\n","export const randomMovie = ({ random }: any) => random.randomMovie.movie;\nexport const totalPagesForRandom = ({ random }: any) => random.totalPages;\n","import React, { useState, useEffect } from 'react';\nimport { Filters } from '../Movies';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMoviesUrl } from '../../API';\nimport i18n from 'i18next';\nimport { getRandomMovieRequested, randomMovie, totalPagesForRandom } from './store';\nimport { getRandomPage } from './utils';\nimport { MovieCard } from '../MovieCard';\n\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_FILTERS_VALUE = '';\n\nexport const RandomMovie: React.FC = () => {\n  const language = i18n.language;\n  const [page, setPage] = useState(DEFAULT_PAGE);\n  const dispatch = useDispatch();\n  const totalPages = useSelector(totalPagesForRandom);\n  const { title, id, poster_path } = useSelector(randomMovie);\n\n  const [genre, setGenre] = useState(DEFAULT_FILTERS_VALUE);\n  const [startDate, setStartDate] = useState(DEFAULT_FILTERS_VALUE);\n  const [endDate, setEndDate] = useState(DEFAULT_FILTERS_VALUE);\n\n  const path = getMoviesUrl(language, genre, startDate, endDate, page);\n\n  const applyFilterParams = (genre: string, startDate: string, endDate: string) => {\n    setGenre(genre);\n    setStartDate(startDate);\n    setEndDate(endDate);\n    setPage(getRandomPage(totalPages));\n  };\n\n  useEffect(() => {\n    dispatch(getRandomMovieRequested(path));\n  }, [dispatch, path]);\n\n  return (\n    <div>\n      <Filters onAplied={applyFilterParams} />\n      <MovieCard title={title} id={id} poster_path={poster_path} />\n    </div>\n  );\n};\n","import { Container } from '@material-ui/core';\nimport { styled } from '@material-ui/core/styles';\n\nexport const StyledContainer = styled(Container)({\n  background: 'rgba(240, 240, 240)',\n  color: 'black',\n  fontWeight: 'bold',\n  textAlign: 'center',\n  width: '90%',\n  minWidth: '1000px',\n  minHeight: '100vh',\n  fontFamily: 'fangsong',\n  marginTop: '-20px',\n});\n","import { NavBar } from './components/NavBar';\nimport { Dashboard, MoviesList } from './components/Dashboard';\nimport { MovieDetails } from './components/MovieDetails';\nimport { Movies } from './components/Movies';\nimport { RandomMovie } from './components/RandomMovie';\nimport { StyledContainer } from './styles';\nimport './i18n/config';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Router>\n      <StyledContainer maxWidth={false}>\n        <h1>{t('title')}</h1>\n        <Switch>\n          <Route path=\"/\" component={NavBar} />\n        </Switch>\n        <Switch>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/movie-details/:id\" component={MovieDetails} />\n          <Route path=\"/movies\" component={Movies} />\n          <Route path=\"/random movie/\" component={RandomMovie} />\n        </Switch>\n        <Switch>\n          <Route path=\"/dashboard/:list\" exact component={MoviesList} />\n        </Switch>\n      </StyledContainer>\n    </Router>\n  );\n};\n\nexport default App;\n","import { initialListsState } from '../components/Dashboard/store';\nimport { initialMoviesState } from '../components/Movies/store';\nimport { initialMovieDetailsState } from '../components/MovieDetails/store';\nimport { initialRandomMovieState } from '../components/RandomMovie/store';\n\nexport const initialState = {\n  initialListsState,\n  initialMoviesState,\n  initialMovieDetailsState,\n  initialRandomMovieState,\n} as any;\n","import { combineReducers } from 'redux';\nimport { lists } from '../components/Dashboard/store';\nimport { movies } from '../components/Movies/store';\nimport { movieDetails } from '../components/MovieDetails/store';\nimport { random } from '../components/RandomMovie/store';\n\nexport default combineReducers({\n  lists,\n  movies,\n  movieDetails,\n  random,\n});\n","import { all } from 'redux-saga/effects';\nimport { watchMoviesSaga } from '../components/Dashboard/store';\nimport { watchGenresSaga, watchFilteredMoviesSaga } from '../components/Movies/store';\nimport { watchMovieDetailsSaga, watchRecomendationsSaga } from '../components/MovieDetails/store';\nimport { watchRandomMovieSaga } from '../components/RandomMovie/store';\n\nexport default function* rootSaga() {\n  yield all([\n    watchMoviesSaga(),\n    watchGenresSaga(),\n    watchFilteredMoviesSaga(),\n    watchMovieDetailsSaga(),\n    watchRecomendationsSaga(),\n    watchRandomMovieSaga(),\n  ]);\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { initialState } from './initialState';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composedEnhacers = compose(\n  applyMiddleware(sagaMiddleware),\n  process.env.NODE_ENV === 'development' ? (window as any).__REDUX_DEVTOOLS_EXTENSION__() : null || compose\n);\n\nexport default createStore(rootReducer, initialState, composedEnhacers);\n\nsagaMiddleware.run(rootSaga);\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}